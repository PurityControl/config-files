#+TITLE: EMACS

* HELP

Take time to read the opening screen on Emacs it explains all the help
available to you.

Most of emacs help is accessed using the <C-h> prefix and then a further
command to refine the type of help you need.

In Emacs ~info~ is your frield you can view a list of all the manual avaiable
with ~<C-h i>~

In emacs just pressing ~<C-h>~ and pausing will explain ~?~ gives further
information on help available

** Summary of help commands (also see Emacs opening screen)

- ~<C-h t>~ :: Emacs introductory tutorial
- ~<C-h r>~ :: Emacs manual
- ~<C-h i>~ :: Browse Manuals (the lisp tutorial and reference manual is here)
- ~<C-h ?>~ :: List all available help options

* Universal Arguments / Numeric Arguments
The various ways you can pass numeric arguments to Emacs are:

- C-u - each press represent the the power of 4 you want as your command
  - C-u (4 ** 1) represents 4
  - C-u C-u (4 ** 2) represents 16
  - C-u C-u C-u (4 ** 3) represents 64 and so on
- C--, M--, C-M-- all pass in a negative argument
- C-<Number>, M-<Number>, C-M-<Number> all pass in number arguments
  - this is really useful when trying to work efficiently as you can use
    same key modifiers as the next command. Terminal emacs seems to have
    problems with Ctrl arguments but Ctrl and Meta arguments are accepted
    so you could do this then release the Meta key for a ctrl key argument.

Always think of ways negative arguments can increase your efficiency.
This allows you to delete backwards without using the ~<M- <Backspace>>~ eg.

 ~<M--> <M-d>~
 ~<M--> <M-3> <M-d>~

This also works with zap-to-char (~M-z~) which is a great vi replacement
for the change commands (~ct~). Remember that you can repeat commands with
~C-x z~ if you get the count wrong, but does repeat with the same numberic
argument.

* Point after incremental search

When searching backwards ~C=r~ the point always finished at the start
of the word you are searching for.  When searching forwards ~C-s~ the point
rests after the characters searched for.  In many cases this is part
of the way through a word, and in many cases the desired behaviour
would be to have the point at the start of the word so the word can be
easily edited without first having to move the point.
One solution is to write a custom function to change emacs behaoviour,
see the dicsussion [[https://www.emacswiki.org/emacs/IncrementalSearch][here]].
Alternatively just hitting ~C-r RET~ after your forward search will bring
the point back to the start of the word.
In Vim it is common to search forward ~/~ and change a word ~cw~ then
continue to search forward ~/~ and repeat the last change ~.~. This allows
you to make quick edits interactively.
In Emacs a better approach would be query search and replace ~M-%~.


* Transposing text
Emacs allows text to be transposed with the following commands

| Key Binding | Command                                   |
|-------------+-------------------------------------------|
| C-t         | Transpose characters                      |
| M-t         | Transpose words                           |
| C-M-t       | Transpose s-expressions                   |
| C-x C-t     | Transpose lines                           |
| M-x         | transpose-paragraphs Transpose paragraphs |
| M-x         | transpose-sentences Transpose sentences   |
|-------------+-------------------------------------------|

* Filling text
Emacs will take a long line of text and reformat it to multiples lines
of text not exceeding a certain size. That size is determined by the
~fill width~.

| Key Binding        | Command                           |
|--------------------+-----------------------------------|
| M-q                | Refills the paragraph point is in |
| C-x f              | Sets the fill column width        |
| C-x .              | Sets the fill prefix              |
| M-x auto-fill-mode | Toggles auto-filling              |
|--------------------+-----------------------------------|


* Commenting
Emacs has the following features for easily commenting code

| Key Binding     | Command                                                          |
|-----------------+------------------------------------------------------------------|
| M-;             | Intelligently comment buffer                                     |
| C-x C-;         | toggle line comment                                              |
| M-x comment-box | Comment region in a comment box                                  |
| M-j, C-M-j      | Break line at point and indent, continuing comment if within one |
|-----------------+------------------------------------------------------------------|

* Removing lines 
Over and above Emacs' standard process of killing lines, you can
remove or keep all lines in a file based on a pattern

| Command         | Description                                         |
|-----------------+-----------------------------------------------------|
| M-x flush-lines | remove all lines in a region that match the pattern |
| M-x keep-lines  | keep all lines in a regions that match the pattern  |
|-----------------+-----------------------------------------------------|


