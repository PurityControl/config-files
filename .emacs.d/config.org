* Emacs Configuration in Org Mode
This configuration is written in org mode. This relies on the init.el
file using org-babel to parse out the embedded emacs lisp code in this
file and loading it into emacs.

See an example of emacs lisp code block delimited between ~begin_src~
and ~end_src~ blocks. The ~begin_src~ declaration needs the language
to be declared and for emacs this is ~emacs-lisp~

#+begin_src emacs-lisp
;; babel needs at least one source block to prevent an error
;; when parsing this file
#+end_src

* Set custom emacs defaults
** Customisable variables

Current best practice for customizable variable is to define them
through the customisation interface. This will then store the
variables in [[file:custom.el][custom.el]]. Have a look at this file to see additional
customizations that have been set not described in this file. 

If customised variables are set here then you must use
=custom-set-variables= or =customize-set-variable= rather than =setq=
[[https://github.com/PurityControl/lvsthw/tree/master/ch02-setting-options][see this discussion]] for more details.

** Make emacs more friendly

#+begin_src emacs-lisp
;; don't make emacs backup files when the file is saved
(setq make-backup-files nil)

;; changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)

;; use spaces for tabs
(setq-default indent-tabs-mode nil)

;; enable column-mode by default
(setq column-number-mode t)

;; setup ido mode acroos the board
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)

;; set default font size based on operating system
;; height is in 1/10 pt
(cond
 ((eq system-type 'darwin)
  (set-face-attribute 'default nil :height 160)))
#+end_src
** Set custom keybindings
*** F12 Key Chord Bindings
   F12 will act as the first part of a key combination for customised
   key bindings.  F12 is being used as a prefix key and so needs to be
   defined with =define-prefix-command= to create a keymap.  Then
   bindings are set with =define-key= and the keymap as the first part
   of the binding. Bindings without a keymap would use the
   =global-set-key= function instead.

   Reserve F12 F12 as will be used to trigger evil mode later.

   See the evil mode section to see the required syntax for
   use-package binding keys with a keymap.
   #+BEGIN_SRC emacs-lisp
     (define-prefix-command 'f12-keymap)
     (define-prefix-command 'whitespace-keymap)
     (global-set-key (kbd "<f12>") 'f12-keymap)
     (global-set-key (kbd "<f12><f12>") nil)
     (define-key f12-keymap (kbd "l") 'linum-mode)
     (define-key f12-keymap (kbd "L") 'global-linum-mode)
     (define-key f12-keymap (kbd "f") 'auto-fill-mode)
     (define-key f12-keymap (kbd "=") 'text-scale-increase)
     (define-key f12-keymap (kbd "-") 'text-scale-decrease)
     (define-key f12-keymap (kbd "0") 'text-scale-adjust)
     (define-key f12-keymap (kbd "m") 'magit-status)
     (define-key f12-keymap (kbd "w") 'whitespace-keymap)
     (define-key whitespace-keymap (kbd "m") 'whitespace-mode)
     (define-key whitespace-keymap (kbd "r") 'whitespace-report)
     (define-key whitespace-keymap (kbd "c") 'whitespace-cleanup)
     (define-key whitespace-keymap (kbd "R") 'whitespace-report-region)
     (define-key whitespace-keymap (kbd "C") 'whitespace-cleanup-region)
   #+END_SRC

*** Emacs Pinky keybindings (F5 and F6)
    The <ctrl <?>> combinations for saving etc. are hurting my little
    finger. This seems most acute on macbook laptops, further
    complicated by the quote and ampersat transposition. These are
    experimental keymaps to see if I can minimise finger pain while
    using the most common day to day emacs keystrokes.

    #+BEGIN_SRC emacs-lisp
     (define-prefix-command 'f6-keymap)
     (global-set-key (kbd "<f6>") 'f6-keymap)
     (define-key f6-keymap (kbd "s") 'save-buffer)
     (define-key f6-keymap (kbd "c") 'save-buffers-kill-terminal)
     (define-key f6-keymap (kbd "g") 'keyboard-quit)
     (define-key f6-keymap (kbd "-") 'undo)
     (define-key f6-keymap (kbd "e") 'eval-last-sexp)
    #+END_SRC

** Set languages recognised by org babel

Babel in org mode needs a list of languages supported.
By default only emacs-lisp is set.
For more information on babel in org mode see the
[[http://orgmode.org/worg/org-contrib/babel/intro.html][documentation]].

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (scheme . t)
     (emacs-lisp . t)
     (lisp . t)
     (ruby . t)
     (python .t)
     (shell . t)
     ))
#+END_SRC

** Configure exports in org mode

By default markdown isn't enabled as an export option in org mode.
It has to be explicity enabled.

#+BEGIN_SRC emacs-lisp
(eval-after-load "org"
  '(require 'ox-md nil t))
#+END_SRC

** Make OSX graphical emacs have same path as shell

Graphical Emacs in OSX will not have the same path as the path in bash
and therefore the path that emacs launched from the terminal has. The
~exec-path-from-shell~ package fixes this. This allows it to find
babel languages such as ~R~ that it couldn't before.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+END_SRC

** Customize settings in own file

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Packages
** Magit

Magit describes itself as a porcelain for git.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+end_src

** Helm

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (helm-mode)
  :bind (("C-x r b" . helm-bookmarks)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)))
#+end_src

** Evil Mode
Evil mode bring vim emulation to emacs. I have added the keychord
dependency so that I can emulate my custome vim bindings. This allows
me to map ~jj~ to escape back into ~normal mode~
I have also mapped the ~;~ key to call ex commands to avoid the need
to use the shift key.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (use-package key-chord
       :load-path "key-chord"
       :config (key-chord-mode 1))
    :config
    (evil-mode 0)
    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
    (define-key evil-motion-state-map ";" 'evil-ex)
    :bind (:map f12-keymap 
            ([f12] . evil-mode)
            ("v" . evil-mode)))

#+end_src

** Yasnippet
Yasnippet bring textmate like bundles for templating to emacs.
Some textmate bundles can be used by yasnippet.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer 10
  :diminish yas-minor-mode
  :config
  (yas-global-mode)
  (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1))))
#+end_src

** Emmet mode
Emmet mode allows you to create html rapidly using css style commands.

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

** Use slime for common lisp

Load slime if installed and set the default lisp implementation to be
used by slime.
More information about using multiple lisps in slime can be found in
the [[https://common-lisp.net/project/slime/doc/html/Multiple-Lisps.html][slime manual]]. This information can also be found within emacs in
info mode.
To use gnu common lisp in emacs just add the slime package to emacs and install
[[http://www.clisp.org][Common Lisp]] on your machine. This config will do the rest.

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :config
    (setq inferior-lisp-program "clisp"))

#+END_SRC

** Geiser mode and Racket for Scheme

   Start geiser with ~M-x run-geiser~

   Racket can be used as the scheme implementation for org babel mode
   and geiser mode.
   Setting the ~geiser-defualt-implementation~ only sets which scheme
   is used for org babel. You still have to choose which scheme
   implementation to use when launching a geiser repl.

   In order to use racket in emacs on windows it must be able to find
   the racket executable. There are many ways to do this but the most
   straight forward is to add the path to the executable to the
   windows ~PATH~ variable.

   =%ProgramFiles%\racket=

   #+BEGIN_SRC emacs-lisp
     (use-package geiser
       :config
       (add-hook 'scheme-mode-hook 'geiser-mode)
       (setq geiser-default-implementation 'racket))
   #+END_SRC
   
** ESS (Emacs Speaks Statistics) mode for R

For code blocks to be able to share the same state in an org mode file
they have to share the same session.
For session base evaluation to work for R code block you have to have
ESS mode installed.

In windows you will need to create an ~.Rprofile~ file so that emacs
knows where you local packages are. This is described in the emacs
docs of this repo.
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t)
#+END_SRC

** Go Mode
Go Mode has a hideous tab length so make it 2 by default.

#+begin_src emacs-lisp
(use-package go-mode
  :init
  (add-hook 'go-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)
            (setq tab-width 2))))
#+end_src

** Erlang Mode

If the erlang directory is present then load the erlang emacs tools.

The install below is based on the assumption that all systems will
have the same version installed. If this turns out not to be the case
then there may need to be conds to determine erlang and tools versions
in addition to the erlang directory.

Erlang dir is either a directory represented as a string or nil.
An aprropriate erlang path will be returned if one has been set for
the current operating system type.
Use package checks whether a directory path has been set and if it has
whether that directory exists on the current machine.
If it does then the erlang emacs tools are loaded.

#+BEGIN_SRC emacs-lisp
  (let* ((erlang-ver "7.3")
         (tools-ver "2.8.3")
         (erlang-dir (cond
                      ((eq system-type 'darwin) "/opt/local/lib/erlang")
                      ((eq system-type 'windows-nt) (concat "C:/Program Files/erl" erlang-ver))
                      (t nil)))
         (erlang-emacs-tools-dir (concat erlang-dir "/lib/tools-" tools-ver "/emacs"))
         (erlang-exec-path (concat erlang-dir "/bin")))
    (use-package erlang-start
      :if
      (and erlang-dir (file-exists-p  erlang-dir))
      :init
      (setq erlang-root-dir erlang-dir)
      (setq exec-path (cons erlang-exec-path exec-path))
      :load-path erlang-emacs-tools-dir))
#+END_SRC

** Alchemist
Alchemist is a tool for Elixir it has support for phoenix and
integrates with mix.

Alchemist is only supported on emacs 24.4 and later

#+begin_src emacs-lisp
(use-package alchemist
  :if (or (and (= emacs-major-version 24)
               (>= emacs-minor-version 4))
          (>= emacs-major-version 25))
  :init
  (use-package elixir-mode))
#+end_src

** Yaml Mode
Yaml mode allows for efficient editing of yaml files, automatic
indentation and syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

** Markdown Mode
Markdown mode allows for efficient editing of markdown files.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC
** Flycheck
Flycheck is a syntax checker for Emacs. It has support for many
languages through various syntax checking and linting tools.
More documentation can be found on their [[http://www.flycheck.org/en/latest/index.html][website]].

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC
